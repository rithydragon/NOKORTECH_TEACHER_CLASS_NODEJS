use NOKORTECH_LMS_DB;

-- ROLES TABLE
DROP TABLE IF EXISTS ROLES;
CREATE TABLE ROLES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ROLE_NAME VARCHAR(50) UNIQUE NOT NULL,
    DESCRIPTION TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE USERS DROP COLUMN ROLE_ID;
-- USERS TABLE
DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_CODE VARCHAR(15) UNIQUE NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100) NULL,
    USERNAME VARCHAR(40) UNIQUE NOT NULL,
    EMAIL VARCHAR(150) UNIQUE NOT NULL,
    PASSWORD VARCHAR(255) UNIQUE NOT NULL,
    GENDER ENUM('FEMALE', 'MALE', 'CUSTOM') NULL,
    USER_TYPE ENUM('STUDENT', 'GENERAL', 'SYSTEM') NULL,
    DOB DATE,
    POB TEXT,
    ADDRESS TEXT,
    PHONE_NUMBER VARCHAR(15) UNIQUE,
    LOGON_STATUS BOOLEAN DEFAULT TRUE,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    LAST_LOGIN TIMESTAMP,
    CREATED_BY INT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL,
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


DROP TABLE IF EXISTS USERROLES;
CREATE TABLE USERROLES (
    USER_ID INT NOT NULL,
    ROLE_ID INT NOT NULL,
    ASSIGNED_BY INT,
    ASSIGNED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (USER_ID, ROLE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID) ON DELETE CASCADE,
    FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);

-- PERMISSIONS TABLE
DROP TABLE IF EXISTS PERMISSIONS;
CREATE TABLE PERMISSIONS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    PERMISSION_NAME VARCHAR(100) UNIQUE NOT NULL,
    DESCRIPTION TEXT,
    MODULE_NAME VARCHAR(50) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



-- ROLE_PERMISSIONS (Many-to-Many Relationship)
DROP TABLE IF EXISTS ROLEPERMISSIONS;
CREATE TABLE ROLEPERMISSIONS (
    ROLE_ID INT NOT NULL,
    PERMISSION_ID INT NOT NULL,
    ASSIGNED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (ROLE_ID, PERMISSION_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID) ON DELETE CASCADE,
    FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(ID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS USERPERMISSIONS;
CREATE TABLE USERPERMISSIONS (
    USER_ID INT NOT NULL,
    PERMISSION_ID INT NOT NULL,
    ASSIGNED_BY INT,
    ASSIGNED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (USER_ID, PERMISSION_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(ID) ON DELETE CASCADE,
    FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);

DROP TABLE IF EXISTS AUTHS;
CREATE TABLE AUTHS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    
    USER_ID INT NOT NULL,
    DEVICE_ID VARCHAR(64) NOT NULL, -- NEW: To support multiple devices

    -- Tokens
    REFRESH_TOKEN VARCHAR(512) NULL,
    ACCESS_TOKEN VARCHAR(512) NULL,
    TOKEN_EXPIRES_AT DATETIME NULL,
    REFRESH_TOKEN_EXPIRES DATETIME NULL,
    
    -- Password Reset
    RESET_TOKEN VARCHAR(255) NULL,
    RESET_TOKEN_EXPIRES DATETIME NULL,
    
    -- Security / Lockout
    FAILED_LOGIN_ATTEMPTS INT DEFAULT 0,
    LAST_LOGIN_AT DATETIME NULL,
    ACCOUNT_LOCKED_UNTIL DATETIME NULL,

    -- NEW: Refresh tracking
    LAST_REFRESH TIMESTAMP NULL,
    
    -- Audit timestamps
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Foreign key & Indexing
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    INDEX (USER_ID, DEVICE_ID)
);

CREATE TABLE USER_LOG (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT NOT NULL,
  DEVICE_ID VARCHAR(64),
  LOGIN_TIME DATETIME DEFAULT CURRENT_TIMESTAMP,
  IP_ADDRESS VARCHAR(45),
  USER_AGENT TEXT,
  FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);


DROP TABLE IF EXISTS CLASS;
CREATE TABLE CLASS (
    ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    CODE VARCHAR(20) UNIQUE NOT NULL,
    COURSE_ID INT,
    INSTRUCTOR_ID INT,
    ROOM VARCHAR(50) NOT NULL,
    SEMESTER INT NOT NULL,
    YEAR VARCHAR(50) NOT NULL,
    TIME VARCHAR(50) NOT NULL,
    SCHEDULE VARCHAR(50),
    MAX_ENROLLMENT INT NOT NULL,
    STATUS ENUM('Enable', 'Disable') DEFAULT 'Enable' NOT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID) ON DELETE SET NULL,
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES USERS(ID) ON DELETE SET NULL,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


DROP TABLE IF EXISTS COURSES;
CREATE TABLE COURSES (
    ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    CODE VARCHAR(15) UNIQUE NOT NULL,
    TITLE VARCHAR(200) NOT NULL,
    TITLE_ENGLISH VARCHAR(200),
    DESCRIPTION TEXT,
    COST DECIMAL(10, 2),
    STATUS ENUM('active', 'inactive') DEFAULT 'active',
    PAY_STATUS ENUM('paid', 'unpaid') DEFAULT 'unpaid',
    LEVEL ENUM('Beginner', 'Intermediate', 'Advanced'),
    INSTRUCTOR_ID INT,
    START_DATE DATE,
    END_DATE DATE,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE TEACHING (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CLASS_ID INT,
    INSTRUCTOR_ID INT,
    FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID) ON DELETE SET NULL,
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES USERS(ID) ON DELETE SET NULL
);

CREATE TABLE STUDENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(15) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100) NULL,
    EMAIL VARCHAR(50) NOT NULL UNIQUE,
    GENDER ENUM('Female', 'Male', 'Custom') NOT NULL,
    DOB DATE NULL,
    POD TEXT NULL,
    ADDRESS TEXT NULL,
    PHONE_NUMBER VARCHAR(15) NULL,
    STATUS BOOLEAN DEFAULT TRUE,
    CLASS_ID INT NULL,
    COURSE_ID INT NULL,
    DEPARTMENT_ID INT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    -- Foreign Key Constraints
    CONSTRAINT FK_STUDENT_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID) ON DELETE SET NULL,
    CONSTRAINT FK_STUDENT_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID) ON DELETE SET NULL,
    CONSTRAINT FK_STUDENT_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(ID) ON DELETE SET NULL,
    CONSTRAINT FK_STUDENT_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_STUDENT_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE DEPARTMENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(15) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100) NULL,
    DESCRIPTION TEXT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    -- Foreign Key Constraints
    CONSTRAINT FK_DEPARTMENT_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_DEPARTMENT_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE
);


-- UImage Table (User Image)
CREATE TABLE UIMAGE (
    IMAGE_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    IMAGEPATH VARCHAR(255) NOT NULL,
    FILE_TYPE	VARCHAR(50),
    CREATED_BY INT DEFAULT NULL,
	CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT DEFAULT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE PERMISSIONGROUPS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    GROUP_NAME VARCHAR(100) NOT NULL
);

CREATE TABLE GROUPROLES (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    GROUP_ID INT,
    ROLE_ID INT,
    FOREIGN KEY (GROUP_ID) REFERENCES PERMISSIONGROUPS(ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID)
);



DROP TABLE IF EXISTS SUBJECTS;
CREATE TABLE SUBJECTS (
    ID INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    CODE VARCHAR(13) UNIQUE NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    MAX_SCORE INT DEFAULT 100,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT, 
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE ON UPDATE SET NULL 
);

DROP TABLE IF EXISTS SCORES;
CREATE TABLE SCORES (
    ID INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    STUDENT_ID INT NULL,
    SUBJECT_ID INT NULL,
    SCORE FLOAT NULL,
    DESCRIPTION TEXT NULL,
    NOTE TEXT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(ID) ON DELETE SET NULL,
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID) ON DELETE SET NULL
);


CREATE TABLE USER_DETAILS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    NATIONALITY VARCHAR(100),
    RELIGION VARCHAR(100),
    MARITAL_STATUS ENUM('Single', 'Married', 'Divorced', 'Widowed', 'Separated'),
    OCCUPATION VARCHAR(100),
    COMPANY_NAME VARCHAR(100),
    COMPANY_ADDRESS TEXT,
    JOB_TITLE VARCHAR(100),
    EMPLOYMENT_TYPE ENUM('Full-Time', 'Part-Time', 'Contract', 'Freelance', 'Internship', 'Unemployed'),
    SALARY DECIMAL(15, 2),
    WORK_EMAIL VARCHAR(150),
    WORK_PHONE_NUMBER VARCHAR(15),
    PASSPORT_NUMBER VARCHAR(50),
    NATIONAL_ID VARCHAR(50),
    DRIVING_LICENSE_NUMBER VARCHAR(50),
    TAX_ID VARCHAR(50),
    SOCIAL_SECURITY_NUMBER VARCHAR(50),
    BLOOD_TYPE ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'),
    DISABILITIES TEXT,
    ALLERGIES TEXT,
    MEDICAL_CONDITIONS TEXT,
    EMERGENCY_CONTACT_NAME VARCHAR(100),
    EMERGENCY_CONTACT_PHONE VARCHAR(15),
    EMERGENCY_CONTACT_RELATIONSHIP VARCHAR(100),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE PARENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    FATHER_NAME VARCHAR(100),
    FATHER_DOB DATE,
    FATHER_OCCUPATION VARCHAR(100),
    FATHER_COMPANY_NAME VARCHAR(100),
    FATHER_COMPANY_ADDRESS TEXT,
    FATHER_PHONE_NUMBER VARCHAR(15),
    FATHER_EMAIL VARCHAR(150),
    FATHER_NATIONALITY VARCHAR(100),
    FATHER_RELIGION VARCHAR(100),
    FATHER_EDUCATION_LEVEL ENUM('Primary', 'Secondary', 'Bachelor', 'Master', 'PhD', 'Other'),
    MOTHER_NAME VARCHAR(100),
    MOTHER_DOB DATE,
    MOTHER_OCCUPATION VARCHAR(100),
    MOTHER_COMPANY_NAME VARCHAR(100),
    MOTHER_COMPANY_ADDRESS TEXT,
    MOTHER_PHONE_NUMBER VARCHAR(15),
    MOTHER_EMAIL VARCHAR(150),
    MOTHER_NATIONALITY VARCHAR(100),
    MOTHER_RELIGION VARCHAR(100),
    MOTHER_EDUCATION_LEVEL ENUM('Primary', 'Secondary', 'Bachelor', 'Master', 'PhD', 'Other'),
    PARENTS_MARITAL_STATUS ENUM('Married', 'Divorced', 'Separated', 'Widowed', 'Single'),
    PARENTS_ADDRESS TEXT,
    PARENTS_ANNUAL_INCOME DECIMAL(15, 2),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE GUARDIANS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    GUARDIAN_NAME VARCHAR(100),
    GUARDIAN_DOB DATE,
    GUARDIAN_RELATIONSHIP ENUM('Father', 'Mother', 'Uncle', 'Aunt', 'Grandfather', 'Grandmother', 'Brother', 'Sister', 'Other'),
    GUARDIAN_OCCUPATION VARCHAR(100),
    GUARDIAN_COMPANY_NAME VARCHAR(100),
    GUARDIAN_COMPANY_ADDRESS TEXT,
    GUARDIAN_PHONE_NUMBER VARCHAR(15),
    GUARDIAN_EMAIL VARCHAR(150),
    GUARDIAN_NATIONALITY VARCHAR(100),
    GUARDIAN_RELIGION VARCHAR(100),
    GUARDIAN_EDUCATION_LEVEL ENUM('Primary', 'Secondary', 'Bachelor', 'Master', 'PhD', 'Other'),
    GUARDIAN_ADDRESS TEXT,
    GUARDIAN_ANNUAL_INCOME DECIMAL(15, 2),
    IS_PRIMARY_GUARDIAN BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE USER_HISTORY (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    EVENT_TYPE ENUM('Profile Update', 'Login', 'Logout', 'Password Change', 'Role Change', 'Permission Change', 'Account Activation', 'Account Deactivation', 'Email Change', 'Phone Change', 'Address Change'),
    EVENT_DESCRIPTION TEXT,
    EVENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IP_ADDRESS VARCHAR(45),
    DEVICE_TYPE ENUM('Desktop', 'Mobile', 'Tablet', 'Other'),
    BROWSER VARCHAR(100),
    OPERATING_SYSTEM VARCHAR(100),
    LOCATION VARCHAR(100),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE USER_DOCUMENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    DOCUMENT_TYPE ENUM('Passport', 'National ID', 'Driving License', 'Birth Certificate', 'Academic Certificate', 'Resume', 'Other'),
    DOCUMENT_NAME VARCHAR(255),
    DOCUMENT_PATH VARCHAR(255),
    DOCUMENT_SIZE BIGINT,
    FILE_TYPE VARCHAR(50),
    UPLOADED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    EXPIRY_DATE DATE,
    IS_VERIFIED BOOLEAN DEFAULT FALSE,
    VERIFIED_BY INT,
    VERIFIED_AT TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (VERIFIED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


CREATE TABLE USER_EDUCATION (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    INSTITUTION_NAME VARCHAR(255),
    DEGREE_TYPE ENUM('Primary', 'Secondary', 'Bachelor', 'Master', 'PhD', 'Diploma', 'Certificate', 'Other'),
    FIELD_OF_STUDY VARCHAR(255),
    START_DATE DATE,
    END_DATE DATE,
    GRADUATION_DATE DATE,
    GPA DECIMAL(4, 2),
    DOCUMENT_PATH VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE USER_EMPLOYMENT (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    COMPANY_NAME VARCHAR(255),
    JOB_TITLE VARCHAR(255),
    EMPLOYMENT_TYPE ENUM('Full-Time', 'Part-Time', 'Contract', 'Freelance', 'Internship'),
    START_DATE DATE,
    END_DATE DATE,
    SALARY DECIMAL(15, 2),
    JOB_DESCRIPTION TEXT,
    REFERENCE_NAME VARCHAR(255),
    REFERENCE_PHONE VARCHAR(15),
    REFERENCE_EMAIL VARCHAR(150),
    DOCUMENT_PATH VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE USER_SKILLS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    SKILL_NAME VARCHAR(255),
    SKILL_LEVEL ENUM('Beginner', 'Intermediate', 'Advanced', 'Expert'),
    CERTIFICATION_NAME VARCHAR(255),
    CERTIFICATION_PATH VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE USER_SOCIAL_MEDIA (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    PLATFORM ENUM('Facebook', 'Twitter', 'LinkedIn', 'Instagram', 'YouTube', 'Other'),
    PROFILE_URL VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE USER_PREFERENCES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    LANGUAGE ENUM('English', 'Spanish', 'French', 'German', 'Chinese', 'Other'),
    THEME ENUM('Light', 'Dark'),
    NOTIFICATION_EMAIL BOOLEAN DEFAULT TRUE,
    NOTIFICATION_SMS BOOLEAN DEFAULT TRUE,
    NOTIFICATION_PUSH BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);




-- TEACHING TABLE
CREATE TABLE TEACHING (
  TEACHING_ID INT AUTO_INCREMENT PRIMARY KEY,
  ROOM_ID INT,
  COURSE_ID INT,
  TIME_ID INT,
  TEACHER_ID INT,
  DESCRIPTION TEXT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  
  FOREIGN KEY (ROOM_ID) REFERENCES ROOM(ID),
  FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID),
  FOREIGN KEY (TIME_ID) REFERENCES TIME(ID),
  FOREIGN KEY (TEACHER_ID) REFERENCES USERS(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL,
  FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


CREATE TABLE ROOM (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    ROOM_NAME VARCHAR(100) NOT NULL,
    ROOM_TYPE VARCHAR(50), -- e.g., Lab, Classroom, Seminar Room
    FLOOR INT DEFAULT 1,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


CREATE TABLE TIME (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    TIME_SLOT VARCHAR(100) NOT NULL, -- e.g., "Monday 08:00-10:00"
    START_TIME TIME,
    END_TIME TIME,
    DAY_OF_WEEK VARCHAR(20),
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


-- Drop existing tables if any (in order to avoid foreign key errors)
-- Drop existing tables
DROP TABLE IF EXISTS STUDENT_SCORE;
DROP TABLE IF EXISTS ACADEMIC_SETTING;
DROP TABLE IF EXISTS SEMESTER;
-- Create SEMISTER table
CREATE TABLE SEMESTER (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NULL,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT DEFAULT NULL
);

-- Create ACADEMIC_SETTING table
CREATE TABLE ACADEMIC_SETTING (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(50) NOT NULL,
    ACADEMIC_CODE VARCHAR(50),
    NAME VARCHAR(255) NOT NULL,
    ENGLISH_NAME VARCHAR(255) NOT NULL,
    SEMESTER_ID INT NULL,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_ACADEMIC_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_ACADEMIC_SEMESTER FOREIGN KEY (SEMESTER_ID) REFERENCES SEMESTER(ID)
);

-- CREATE BATCH TABLE
-- CREATE BATCH TABLE WITH ENGLISH NAME COLUMN
-- CREATE BATCH TABLE WITH AUDIT COLUMNS
CREATE TABLE BATCH (
  ID INT NOT NULL AUTO_INCREMENT,
  BATCH_NAME VARCHAR(100) NOT NULL,
  BATCH_ENGLISH_NAME VARCHAR(100) NOT NULL,
  ACADEMIC_ID INT NOT NULL,
  START_DATE DATE NOT NULL,
  END_DATE DATE NOT NULL,
  IS_ACTIVE TINYINT(1) DEFAULT 1,
  CREATED_BY INT NULL,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_BY INT,
  UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (ID),
  UNIQUE KEY BATCH_UNIQUE (BATCH_NAME, ACADEMIC_ID),
  FOREIGN KEY (ACADEMIC_ID) REFERENCES ACADEMIC_SETTING(ID) ON DELETE RESTRICT ON UPDATE CASCADE
) 

-- Create STUDENT_SCORE table
CREATE TABLE STUDENT_SCORE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT NULL,
    SUBJECT_ID INT NULL,
	CLASS_ID INT NULL,
    ACADEMIC_ID INT NULL,
	SEMESTER_ID INT NULL,
    SCORE DECIMAL(5,2) NULL,
    RANKING VARCHAR(3) NULL,
	EXAM_DATE DATE NULL,
    IS_EDITED BOOLEAN DEFAULT FALSE,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_SCORE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
	CONSTRAINT FK_SCORE_UPDATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
	CONSTRAINT FK_SCORE_CLASS FOREIGN KEY (CREATED_BY) REFERENCES CLASS(ID),
    CONSTRAINT FK_SCORE_ACADEMIC FOREIGN KEY (ACADEMIC_ID) REFERENCES ACADEMIC_SETTING(ID)
);


CREATE TABLE STUDENT_SCORE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT NULL,
    SUBJECT_ID INT NULL,
    CLASS_ID INT NULL,
    ACADEMIC_ID INT NULL,
    SEMESTER_ID INT NULL,
    SCORE DECIMAL(5,2) NULL,
    RANKING VARCHAR(3) NULL,
    EXAM_DATE DATE NULL,
    IS_CREATED BOOLEAN DEFAULT TRUE,
    IS_EDITED BOOLEAN DEFAULT FALSE,
    NOTE TEXT(200) NULL,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_SCORE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_SCORE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_SCORE_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    CONSTRAINT FK_SCORE_ACADEMIC FOREIGN KEY (ACADEMIC_ID) REFERENCES ACADEMIC_SETTING(ID),
    CONSTRAINT FK_SCORE_SEMESTER FOREIGN KEY (SEMESTER_ID) REFERENCES SEMESTER(ID),
    CONSTRAINT FK_SCORE_SUBJECT FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECT(ID),
    CONSTRAINT FK_SCORE_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES USERS(ID)
);


CREATE TABLE TELEGRAM_STORE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    
    -- Link Information
    LINK_TYPE ENUM('GROUP', 'PERSONAL', 'OFFICIAL', 'STUDY_GROUP') NOT NULL DEFAULT 'GROUP',
    TELEGRAM_LINK VARCHAR(255) NOT NULL,
    LINK_TITLE VARCHAR(100) NOT NULL,
    LINK_DESCRIPTION TEXT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    IS_OFFICIAL BOOLEAN DEFAULT FALSE,
    
    -- Relationship Fields (all optional)
    COURSE_ID INT NULL,
    CLASS_ID INT NULL,
    ACADEMIC_ID INT NULL,
    DEPARTMENT_ID INT NULL,
    
    -- Metadata
    CREATED_BY INT NOT NULL,
    UPDATED_BY INT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    EXPIRES_AT TIMESTAMP NULL,
    
    -- Constraints
    CONSTRAINT FK_TELEGRAM_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID) ON DELETE SET NULL,
    CONSTRAINT FK_TELEGRAM_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID) ON DELETE SET NULL,
    CONSTRAINT FK_TELEGRAM_ACADEMIC FOREIGN KEY (ACADEMIC_ID) REFERENCES ACADEMIC_SETTING(ID) ON DELETE SET NULL,
    CONSTRAINT FK_TELEGRAM_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(ID) ON DELETE SET NULL,
    CONSTRAINT FK_TELEGRAM_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_TELEGRAM_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);

-- Indexes for performance
CREATE INDEX IDX_TELEGRAM_COURSE ON TELEGRAM_STORE(COURSE_ID);
CREATE INDEX IDX_TELEGRAM_CLASS ON TELEGRAM_STORE(CLASS_ID);
CREATE INDEX IDX_TELEGRAM_ACADEMIC ON TELEGRAM_STORE(ACADEMIC_ID);
CREATE INDEX IDX_TELEGRAM_DEPARTMENT ON TELEGRAM_STORE(DEPARTMENT_ID);
CREATE INDEX IDX_TELEGRAM_ACTIVE ON TELEGRAM_STORE(IS_ACTIVE);
CREATE INDEX IDX_TELEGRAM_EXPIRY ON TELEGRAM_STORE(EXPIRES_AT);


CREATE TABLE ATTENDANCE_TYPES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(10) NOT NULL UNIQUE,
    NAME VARCHAR(50) NOT NULL,
    DESCRIPTION TEXT NULL,
    IS_PRESENT BOOLEAN DEFAULT FALSE,
    COLOR_CODE VARCHAR(7) NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_ATTENDANCE_TYPE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_ATTENDANCE_TYPE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);



CREATE TABLE CLASS_SCHEDULES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CLASS_ID INT NOT NULL,
    SUBJECT_ID INT NOT NULL,
    DAY_OF_WEEK ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    ROOM VARCHAR(20) NULL,
    TEACHER_ID INT NOT NULL,
    ACADEMIC_YEAR_ID INT NOT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_SCHEDULE_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    CONSTRAINT FK_SCHEDULE_SUBJECT FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID),
    CONSTRAINT FK_SCHEDULE_TEACHER FOREIGN KEY (TEACHER_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_SCHEDULE_ACADEMIC_YEAR FOREIGN KEY (ACADEMIC_YEAR_ID) REFERENCES ACADEMIC_SETTING(ID),
    CONSTRAINT FK_SCHEDULE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_SCHEDULE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);      


CREATE TABLE STUDENT_ATTENDANCE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT NOT NULL,
    SCHEDULE_ID INT NULL,
    ATTENDANCE_DATE DATE NULL,
    ATTENDANCE_TYPE_ID INT NULL,
    NOTES TEXT NULL,
    RECORDED_BY INT NULL,
    RECORDED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_ATTENDANCE_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(ID),
    CONSTRAINT FK_ATTENDANCE_SCHEDULE FOREIGN KEY (SCHEDULE_ID) REFERENCES CLASS_SCHEDULES(ID),
    CONSTRAINT FK_ATTENDANCE_TYPE FOREIGN KEY (ATTENDANCE_TYPE_ID) REFERENCES ATTENDANCE_TYPES(ID),
    CONSTRAINT FK_ATTENDANCE_RECORDED_BY FOREIGN KEY (RECORDED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_ATTENDANCE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID),
    
    UNIQUE KEY UNIQUE_ATTENDANCE (STUDENT_ID, SCHEDULE_ID, ATTENDANCE_DATE)
);


CREATE TABLE CLASS_SCHEDULES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CLASS_ID INT NOT NULL,
    SUBJECT_ID INT NOT NULL,
    COURSE_ID INT NOT NULL, -- added
    DAY_OF_WEEK ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    ROOM VARCHAR(20) NULL,
    TEACHER_ID INT NOT NULL,
    ACADEMIC_YEAR_ID INT NOT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_SCHEDULE_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    CONSTRAINT FK_SCHEDULE_SUBJECT FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID),
    CONSTRAINT FK_SCHEDULE_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID),
    CONSTRAINT FK_SCHEDULE_TEACHER FOREIGN KEY (TEACHER_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_SCHEDULE_ACADEMIC_YEAR FOREIGN KEY (ACADEMIC_YEAR_ID) REFERENCES ACADEMIC_SETTING(ID),
    CONSTRAINT FK_SCHEDULE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_SCHEDULE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);



CREATE TABLE ATTENDANCE_EXCEPTIONS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    REASON TEXT NOT NULL,
    APPROVED_BY INT NULL,
    APPROVED_DATE TIMESTAMP NULL,
    STATUS ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_EXCEPTION_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(ID),
    CONSTRAINT FK_EXCEPTION_APPROVED_BY FOREIGN KEY (APPROVED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_EXCEPTION_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID)
);


CREATE TABLE ATTENDANCE_REPORTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    REPORT_NAME VARCHAR(100) NOT NULL,
    REPORT_TYPE ENUM('Daily', 'Weekly', 'Monthly', 'Custom') NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    CLASS_ID INT NULL,
    DEPARTMENT_ID INT NULL,
    GENERATED_BY INT NOT NULL,
    GENERATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FILE_PATH VARCHAR(255) NULL,
    
    CONSTRAINT FK_REPORT_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    CONSTRAINT FK_REPORT_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(ID),
    CONSTRAINT FK_REPORT_GENERATED_BY FOREIGN KEY (GENERATED_BY) REFERENCES USERS(ID)
);


-- Professors table
CREATE TABLE PROFESSORS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(20) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100),
    GENDER ENUM('Male', 'Female', 'Other'),


    DATE_OF_BIRTH DATE,
    PHONE_NUMBER VARCHAR(20),
    SPECIALIZATION VARCHAR(100),
    DEGREE_LEVEL VARCHAR(50),
    GRADUATION_YEAR INT,
    STATUS BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Subjects table
CREATE TABLE SUBJECTS (  // replace with courses
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(20) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    CREDITS INT,
    STATUS BOOLEAN DEFAULT TRUE
);

-- Classes table
CREATE TABLE CLASSES (    // not use
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(20) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    BATCH VARCHAR(20),
    SEMESTER VARCHAR(20),
    ACADEMIC_YEAR VARCHAR(20),
    STATUS BOOLEAN DEFAULT TRUE
);

-- Professor Teaching Hours table
CREATE TABLE PROFESSOR_TEACHING_HOURS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    PROFESSOR_ID INT NULL,
    CLASS_ID INT NULL,
    COURSE_ID INT NULL,
    SUBJECT_ID INT NULL,
    TEACHING_DATE DATE NULL,
    LESSON_CONTENT TEXT,
    TIMES INT DEFAULT 1,
    HOURS DECIMAL(5,2) NULL,
    DURATION VARCHAR(50),
    ATTENDANCE TEXT,
    NOTES TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSORS(ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID)
);










SELECT 
    SS.ID AS SCORE_ID,
    SS.STUDENT_ID,
    SS.SUBJECT_ID,
    SS.SCORE,
    SS.RANKING,
    SS.IS_EDITED,
    SS.CREATED_DATE AS SCORE_CREATED_DATE,

    ACADEMIC.ID AS ACADEMIC_ID,
    ACADEMIC.NAME AS ACADEMIC_YEAR_NAME,
    ACADEMIC.ENGLISH_NAME,
    ACADEMIC.CODE,
    SEM.NAME AS SEMESTER_NAME

FROM STUDENT_SCORE SS
LEFT JOIN ACADEMIC_SETTING ACADEMIC ON SS.ACADEMIC_ID = ACADEMIC.ID
LEFT JOIN SEMESTER SEM ON ACADEMIC.SEMESTER_ID = SEM.ID;



-- Create queries
1. Get user info(include role and permission) by  username
-- Get user info (including role and permission) by username:
SELECT 
    U.ID AS UserId,
    U.USER_CODE AS UserCode,
    U.NAME AS Name,
    U.NAME_ENGLISH AS NameEnglish,
    U.USERNAME AS Username,
    U.EMAIL AS Email,
    U.PASSWORD AS Password,
    U.GENDER AS Gender,
    U.USER_TYPE AS UserType,
    U.DOB AS DateOfBirth,
    U.POB AS PlaceOfBirth,
    U.ADDRESS AS Address,
    U.PHONE_NUMBER AS PhoneNumber,
    U.LOGON_STATUS AS LogonStatus,
    U.IS_ACTIVE AS IsActive,
    U.LAST_LOGIN AS LastLogin,
    U.CREATED_BY AS CreatedBy,
    U.CREATED_AT AS CreatedAt,
    U.UPDATED_BY AS UpdatedBy,
    U.UPDATED_AT AS UpdatedAt,
    R.ID AS RoleId,
    R.ROLE_NAME AS RoleName,
    R.DESCRIPTION AS RoleDescription,
    R.CREATED_AT AS RoleCreatedAt,
    P.ID AS PermissionId,
    P.PERMISSION_NAME AS PermissionName,
    P.DESCRIPTION AS PermissionDescription,
    P.MODULE_NAME AS ModuleName,
    P.CREATED_AT AS PermissionCreatedAt
FROM USERS U
LEFT JOIN USERROLES UR ON U.ID = UR.USER_ID
LEFT JOIN ROLES R ON UR.ROLE_ID = R.ID
LEFT JOIN ROLEPERMISSIONS RP ON R.ID = RP.ROLE_ID
LEFT JOIN PERMISSIONS P ON RP.PERMISSION_ID = P.ID
WHERE U.USERNAME = 'username_here';

2. Get user info(include role and permission) by  ID
SELECT 
    U.ID AS UserId,
    U.USER_CODE AS UserCode,
    U.NAME AS Name,
    U.NAME_ENGLISH AS NameEnglish,
    U.USERNAME AS Username,
    U.EMAIL AS Email,
    U.PASSWORD AS Password,
    U.GENDER AS Gender,
    U.USER_TYPE AS UserType,
    U.DOB AS DateOfBirth,
    U.POB AS PlaceOfBirth,
    U.ADDRESS AS Address,
    U.PHONE_NUMBER AS PhoneNumber,
    U.LOGON_STATUS AS LogonStatus,
    U.IS_ACTIVE AS IsActive,
    U.LAST_LOGIN AS LastLogin,
    U.CREATED_BY AS CreatedBy,
    U.CREATED_AT AS CreatedAt,
    U.UPDATED_BY AS UpdatedBy,
    U.UPDATED_AT AS UpdatedAt,
    R.ID AS RoleId,
    R.ROLE_NAME AS RoleName,
    R.DESCRIPTION AS RoleDescription,
    R.CREATED_AT AS RoleCreatedAt,
    P.ID AS PermissionId,
    P.PERMISSION_NAME AS PermissionName,
    P.DESCRIPTION AS PermissionDescription,
    P.MODULE_NAME AS ModuleName,
    P.CREATED_AT AS PermissionCreatedAt
FROM USERS U
LEFT JOIN USERROLES UR ON U.ID = UR.USER_ID
LEFT JOIN ROLES R ON UR.ROLE_ID = R.ID
LEFT JOIN ROLEPERMISSIONS RP ON R.ID = RP.ROLE_ID
LEFT JOIN PERMISSIONS P ON RP.PERMISSION_ID = P.ID
WHERE U.ID = ?;

3. Check user permission by  (Who have permission?) by user Id
-- Check user permission by user ID (list permissions for the user):
SELECT 
    U.ID AS UserId,
    U.USER_CODE AS UserCode,
    U.NAME AS Name,
    U.NAME_ENGLISH AS NameEnglish,
    U.USERNAME AS Username,
    U.EMAIL AS Email,
    U.PASSWORD AS Password,
    U.GENDER AS Gender,
    U.USER_TYPE AS UserType,
    U.DOB AS DateOfBirth,
    U.POB AS PlaceOfBirth,
    U.ADDRESS AS Address,
    U.PHONE_NUMBER AS PhoneNumber,
    U.LOGON_STATUS AS LogonStatus,
    U.IS_ACTIVE AS IsActive,
    U.LAST_LOGIN AS LastLogin,
    U.CREATED_BY AS CreatedBy,
    U.CREATED_AT AS CreatedAt,
    U.UPDATED_BY AS UpdatedBy,
    U.UPDATED_AT AS UpdatedAt,
    P.ID AS PermissionId,
    P.PERMISSION_NAME AS PermissionName,
    P.DESCRIPTION AS PermissionDescription,
    P.MODULE_NAME AS ModuleName,
    P.CREATED_AT AS PermissionCreatedAt
FROM USERS U
JOIN USERROLES UR ON U.ID = UR.USER_ID
JOIN ROLES R ON UR.ROLE_ID = R.ID
JOIN ROLEPERMISSIONS RP ON R.ID = RP.ROLE_ID
JOIN PERMISSIONS P ON RP.PERMISSION_ID = P.ID
WHERE U.ID = ?;

4. Check user role (who have role?) by  user Id
-- Check user role by user ID (list roles for the user):
SELECT 
    U.ID AS UserId,
    U.USER_CODE AS UserCode,
    U.NAME AS Name,
    U.NAME_ENGLISH AS NameEnglish,

    U.USERNAME AS Username,
    U.EMAIL AS Email,
    U.PASSWORD AS Password,
    U.GENDER AS Gender,
    U.USER_TYPE AS UserType,
    U.DOB AS DateOfBirth,
    U.POB AS PlaceOfBirth,
    U.ADDRESS AS Address,
    U.PHONE_NUMBER AS PhoneNumber,
    U.LOGON_STATUS AS LogonStatus,
    U.IS_ACTIVE AS IsActive,
    U.LAST_LOGIN AS LastLogin,
    U.CREATED_BY AS CreatedBy,
    U.CREATED_AT AS CreatedAt,
    U.UPDATED_BY AS UpdatedBy,
    U.UPDATED_AT AS UpdatedAt,
    R.ID AS RoleId,
    R.ROLE_NAME AS RoleName,
    R.DESCRIPTION AS RoleDescription,
    R.CREATED_AT AS RoleCreatedAt
FROM USERS U
JOIN USERROLES UR ON U.ID = UR.USER_ID
JOIN ROLES R ON UR.ROLE_ID = R.ID
WHERE U.ID = ?;



-- Check user permission by user ID (list all permission fields):
SELECT 
    P.ID AS PermissionId,
    P.PERMISSION_NAME AS PermissionName,
    P.DESCRIPTION AS PermissionDescription,
    P.MODULE_NAME AS ModuleName,
    P.CREATED_AT AS PermissionCreatedAt
FROM USERROLES UR
JOIN ROLEPERMISSIONS RP ON UR.ROLE_ID = RP.ROLE_ID
JOIN PERMISSIONS P ON RP.PERMISSION_ID = P.ID
WHERE UR.USER_ID = ?;

-- 4. Check user role by user ID (list only role fields; no user info):
SELECT 
    R.ID AS RoleId,
    R.ROLE_NAME AS RoleName,
    R.DESCRIPTION AS RoleDescription,
    R.CREATED_AT AS RoleCreatedAt
FROM USERROLES UR
JOIN ROLES R ON UR.ROLE_ID = R.ID
WHERE UR.USER_ID = ?;









-----------------------------------------------------
-- Insert Data into the USER_CERTIFICATIONS Table
INSERT INTO USER_SOCIAL_MEDIA (USER_ID, PLATFORM, PROFILE_URL)
VALUES
-- riththydragon
(153, 'Facebook', 'https://facebook.com/riththydragon'),
(153, 'LinkedIn', 'https://linkedin.com/in/riththydragon'),

-- sopheapsours
(139, 'Facebook', 'https://facebook.com/sopheapsours'),
(139, 'Twitter', 'https://twitter.com/sopheapsours'),

-- nikamall (first entry)
(140, 'Facebook', 'https://facebook.com/nikamall'),
(140, 'Instagram', 'https://instagram.com/nikamall'),

-- nikamall (second entry)
(141, 'Facebook', 'https://facebook.com/nikamall2'),
(141, 'LinkedIn', 'https://linkedin.com/in/nikamall2'),

-- Additional Users
(142, 'Facebook', 'https://facebook.com/sokdara'),
(142, 'Twitter', 'https://twitter.com/sokdara'),
(143, 'Facebook', 'https://facebook.com/leapchan'),
(143, 'Instagram', 'https://instagram.com/leapchan'),
(144, 'Facebook', 'https://facebook.com/vannaklim'),
(144, 'LinkedIn', 'https://linkedin.com/in/vannaklim'),
(145, 'Facebook', 'https://facebook.com/sreynichkim'),
(145, 'Twitter', 'https://twitter.com/sreynichkim'),
(146, 'Facebook', 'https://facebook.com/chanthasok'),
(146, 'LinkedIn', 'https://linkedin.com/in/chanthasok');    

-----------------------------------------------------
-- Insert Data into the USER_SOCIAL_MEDIA Table
INSERT INTO USER_PREFERENCES (USER_ID, LANGUAGE, THEME, NOTIFICATION_EMAIL, NOTIFICATION_SMS, NOTIFICATION_PUSH)
VALUES
-- riththydragon
(153, 'English', 'Dark', TRUE, TRUE, TRUE),

-- sopheapsours
(139, 'Khmer', 'Light', TRUE, FALSE, TRUE),

-- nikamall (first entry)
(140, 'English', 'Dark', FALSE, TRUE, TRUE),

-- nikamall (second entry)
(141, 'Khmer', 'Light', TRUE, TRUE, FALSE),

-- Additional Users
(142, 'Khmer', 'Dark', TRUE, FALSE, FALSE),
(143, 'English', 'Light', FALSE, TRUE, TRUE),
(144, 'Khmer', 'Dark', TRUE, TRUE, TRUE),
(145, 'English', 'Light', TRUE, FALSE, TRUE),
(146, 'Khmer', 'Dark', FALSE, TRUE, FALSE);


 static async getUserProfile(userId) {
        try {
            const query = `
            SELECT 
    -- User Basic Information
    U.ID AS UserId,
    U.USER_CODE AS UserCode,
    U.NAME AS Name,
    U.NAME_ENGLISH AS NameEnglish,
    U.USERNAME AS Username,
    U.EMAIL AS Email,
    U.GENDER AS Gender,
    U.USER_TYPE AS UserType,
    U.DOB AS DateOfBirth,
    U.POB AS PlaceOfBirth,
    U.ADDRESS AS Address,
    U.PHONE_NUMBER AS PhoneNumber,
    U.LOGON_STATUS AS LogonStatus,
    U.IS_ACTIVE AS UserActive,
    U.LAST_LOGIN AS LastLogin,
    U.CREATED_BY AS CreatedBy,
    U.CREATED_AT AS CreatedAt,
    U.UPDATED_BY AS UpdatedBy,
    U.UPDATED_AT AS UpdatedAt,

    -- User Roles, Permissions, and Groups
    COALESCE(
        (
            SELECT JSON_ARRAYAGG(R.ROLE_NAME)
            FROM (
                SELECT DISTINCT R.ROLE_NAME
                FROM USERROLES UR
                JOIN ROLES R ON UR.ROLE_ID = R.ID
                WHERE UR.USER_ID = U.ID
            ) R
        ), '[]'
    ) AS Roles,
    COALESCE(
        (
            SELECT JSON_ARRAYAGG(P.PERMISSION_NAME)
            FROM (
                SELECT DISTINCT P.PERMISSION_NAME
                FROM USERROLES UR
                JOIN ROLES R ON UR.ROLE_ID = R.ID
                JOIN ROLEPERMISSIONS RP ON R.ID = RP.ROLE_ID
                JOIN PERMISSIONS P ON RP.PERMISSION_ID = P.ID
                WHERE UR.USER_ID = U.ID
            ) P
        ), '[]'
    ) AS Permissions,
    COALESCE(
        (
            SELECT JSON_ARRAYAGG(PG.GROUP_NAME)
            FROM (
                SELECT DISTINCT PG.GROUP_NAME
                FROM GROUPROLES GR
                JOIN PERMISSIONGROUPS PG ON GR.GROUP_ID = PG.ID
                JOIN USERROLES UR ON GR.ROLE_ID = UR.ROLE_ID
                WHERE UR.USER_ID = U.ID
            ) PG
        ), '[]'
    ) AS \`Groups\`,

    -- User Image
    UI.IMAGEPATH AS ImagePath,
    UI.FILE_TYPE AS FileType,

    -- User Details
    UD.NATIONALITY AS Nationality,
    UD.RELIGION AS Religion,
    UD.MARITAL_STATUS AS MaritalStatus,
    UD.OCCUPATION AS Occupation,
    UD.COMPANY_NAME AS CompanyName,
    UD.COMPANY_ADDRESS AS CompanyAddress,
    UD.JOB_TITLE AS JobTitle,
    UD.EMPLOYMENT_TYPE AS EmploymentType,
    UD.SALARY AS Salary,
    UD.WORK_EMAIL AS WorkEmail,
    UD.WORK_PHONE_NUMBER AS WorkPhoneNumber,
    UD.PASSPORT_NUMBER AS PassportNumber,
    UD.NATIONAL_ID AS NationalID,
    UD.DRIVING_LICENSE_NUMBER AS DrivingLicenseNumber,
    UD.TAX_ID AS TaxID,
    UD.SOCIAL_SECURITY_NUMBER AS SocialSecurityNumber,
    UD.BLOOD_TYPE AS BloodType,
    UD.DISABILITIES AS Disabilities,
    UD.ALLERGIES AS Allergies,
    UD.MEDICAL_CONDITIONS AS MedicalConditions,
    UD.EMERGENCY_CONTACT_NAME AS EmergencyContactName,
    UD.EMERGENCY_CONTACT_PHONE AS EmergencyContactPhone,
    UD.EMERGENCY_CONTACT_RELATIONSHIP AS EmergencyContactRelationship,

    -- Parent's Information
    P.FATHER_NAME AS FatherName,
    P.FATHER_DOB AS FatherDOB,
    P.FATHER_OCCUPATION AS FatherOccupation,
    P.FATHER_COMPANY_NAME AS FatherCompanyName,
    P.FATHER_COMPANY_ADDRESS AS FatherCompanyAddress,
    P.FATHER_PHONE_NUMBER AS FatherPhoneNumber,
    P.FATHER_EMAIL AS FatherEmail,
    P.FATHER_NATIONALITY AS FatherNationality,
    P.FATHER_RELIGION AS FatherReligion,
    P.FATHER_EDUCATION_LEVEL AS FatherEducationLevel,
    P.MOTHER_NAME AS MotherName,
    P.MOTHER_DOB AS MotherDOB,
    P.MOTHER_OCCUPATION AS MotherOccupation,
    P.MOTHER_COMPANY_NAME AS MotherCompanyName,
    P.MOTHER_COMPANY_ADDRESS AS MotherCompanyAddress,
    P.MOTHER_PHONE_NUMBER AS MotherPhoneNumber,
    P.MOTHER_EMAIL AS MotherEmail,
    P.MOTHER_NATIONALITY AS MotherNationality,
    P.MOTHER_RELIGION AS MotherReligion,
    P.MOTHER_EDUCATION_LEVEL AS MotherEducationLevel,
    P.PARENTS_MARITAL_STATUS AS ParentsMaritalStatus,
    P.PARENTS_ADDRESS AS ParentsAddress,
    P.PARENTS_ANNUAL_INCOME AS ParentsAnnualIncome,

    -- Guardian's Information
    G.GUARDIAN_NAME AS GuardianName,
    G.GUARDIAN_DOB AS GuardianDOB,
    G.GUARDIAN_RELATIONSHIP AS GuardianRelationship,
    G.GUARDIAN_OCCUPATION AS GuardianOccupation,
    G.GUARDIAN_COMPANY_NAME AS GuardianCompanyName,
    G.GUARDIAN_COMPANY_ADDRESS AS GuardianCompanyAddress,
    G.GUARDIAN_PHONE_NUMBER AS GuardianPhoneNumber,
    G.GUARDIAN_EMAIL AS GuardianEmail,
    G.GUARDIAN_NATIONALITY AS GuardianNationality,
    G.GUARDIAN_RELIGION AS GuardianReligion,
    G.GUARDIAN_EDUCATION_LEVEL AS GuardianEducationLevel,
    G.GUARDIAN_ADDRESS AS GuardianAddress,
    G.GUARDIAN_ANNUAL_INCOME AS GuardianAnnualIncome,
    G.IS_PRIMARY_GUARDIAN AS IsPrimaryGuardian,

    -- User History (Latest Event)
    (
        SELECT JSON_OBJECT(
            'EventType', UH.EVENT_TYPE,
            'EventDescription', UH.EVENT_DESCRIPTION,
            'EventDate', UH.EVENT_DATE,
            'IPAddress', UH.IP_ADDRESS,
            'DeviceType', UH.DEVICE_TYPE,
            'Browser', UH.BROWSER,
            'OperatingSystem', UH.OPERATING_SYSTEM,
            'Location', UH.LOCATION
        )
        FROM USER_HISTORY UH
        WHERE UH.USER_ID = U.ID
        ORDER BY UH.EVENT_DATE DESC
        LIMIT 1
    ) AS LatestHistoryEvent,

    -- User Documents (Aggregated)
    COALESCE(
        (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'DocumentType', UD.DOCUMENT_TYPE,
                    'DocumentName', UD.DOCUMENT_NAME,
                    'DocumentPath', UD.DOCUMENT_PATH,
                    'DocumentSize', UD.DOCUMENT_SIZE,
                    'FileType', UD.FILE_TYPE,
                    'UploadedAt', UD.UPLOADED_AT,
                    'ExpiryDate', UD.EXPIRY_DATE,
                    'IsVerified', UD.IS_VERIFIED,
                    'VerifiedBy', UD.VERIFIED_BY,
                    'VerifiedAt', UD.VERIFIED_AT
                )
            )
            FROM USER_DOCUMENTS UD
            WHERE UD.USER_ID = U.ID
        ), '[]'
    ) AS Documents,

    -- User Education (Aggregated)
    COALESCE(
        (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'InstitutionName', UE.INSTITUTION_NAME,
                    'DegreeType', UE.DEGREE_TYPE,
                    'FieldOfStudy', UE.FIELD_OF_STUDY,
                    'StartDate', UE.START_DATE,
                    'EndDate', UE.END_DATE,
                    'GraduationDate', UE.GRADUATION_DATE,
                    'GPA', UE.GPA,
                    'DocumentPath', UE.DOCUMENT_PATH
                )
            )
            FROM USER_EDUCATION UE
            WHERE UE.USER_ID = U.ID
        ), '[]'
    ) AS Education,

    -- User Employment (Aggregated)
    COALESCE(
        (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'CompanyName', UEM.COMPANY_NAME,
                    'JobTitle', UEM.JOB_TITLE,
                    'EmploymentType', UEM.EMPLOYMENT_TYPE,
                    'StartDate', UEM.START_DATE,
                    'EndDate', UEM.END_DATE,
                    'Salary', UEM.SALARY,
                    'JobDescription', UEM.JOB_DESCRIPTION,
                    'ReferenceName', UEM.REFERENCE_NAME,
                    'ReferencePhone', UEM.REFERENCE_PHONE,
                    'ReferenceEmail', UEM.REFERENCE_EMAIL,
                    'DocumentPath', UEM.DOCUMENT_PATH
                )
            )
            FROM USER_EMPLOYMENT UEM
            WHERE UEM.USER_ID = U.ID
        ), '[]'
    ) AS Employment,

    -- User Skills (Aggregated)
    COALESCE(
        (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'SkillName', US.SKILL_NAME,
                    'SkillLevel', US.SKILL_LEVEL,
                    'CertificationName', US.CERTIFICATION_NAME,
                    'CertificationPath', US.CERTIFICATION_PATH
                )
            )
            FROM USER_SKILLS US
            WHERE US.USER_ID = U.ID
        ), '[]'
    ) AS Skills,

    -- User Social Media (Aggregated)
    COALESCE(
        (
            SELECT JSON_ARRAYAGG(
                JSON_OBJECT(
                    'Platform', USM.PLATFORM,
                    'ProfileUrl', USM.PROFILE_URL
                )
            )
            FROM USER_SOCIAL_MEDIA USM
            WHERE USM.USER_ID = U.ID
        ), '[]'
    ) AS SocialMedia,

    -- User Preferences
    UP.LANGUAGE AS Language,
    UP.THEME AS Theme,
    UP.NOTIFICATION_EMAIL AS NotificationEmail,
    UP.NOTIFICATION_SMS AS NotificationSMS,
    UP.NOTIFICATION_PUSH AS NotificationPush

FROM USERS U
LEFT JOIN UIMAGE UI ON U.ID = UI.USER_ID
LEFT JOIN USER_DETAILS UD ON U.ID = UD.USER_ID
LEFT JOIN PARENTS P ON U.ID = P.USER_ID
LEFT JOIN GUARDIANS G ON U.ID = G.USER_ID
LEFT JOIN USER_PREFERENCES UP ON U.ID = UP.USER_ID
WHERE U.ID = ?;
            
            
            `
            const [rows] = await pool.query(queryUserProfile, [userId]);
    
            if (rows.length === 0) {
                throw new Error('User not found');
            }
    
            return rows[0]; // Return user profile
        } catch (error) {
            console.error('Error fetching user profile:', error);
            throw new Error('Failed to retrieve user profile');
        }
    }








Target:
USERS : 153;
STUDENTS :103
104
105
106
107
108
109
110
111
112
113
114
115
116
;
ATTENDANCE_TYPES : 1
2
3
4
5
6
7
8
9
10

CLASS_SCHEDULES : ;
SUBJECTS : 11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
;
COURSES : 11
12
13
14
15
16
17
18
19
20
;
TEACHERS : 139
140
141
142
143
144
153
244
246
247
248
249
250
251
252
253
254
256
257
258
259
260;
CLASS_SCHEDULES : 
1
2
3
4
5
6
7
8
9
10

PROFESSORS:
1
2
3
4
5
6
7
8
9
10



INSERT INTO STUDENT_ATTENDANCE 
(STUDENT_ID, ATTENDANCE_TYPE_ID, COURSE_ID, ATTENDANCE_DATE, SCHEDULE_ID, NOTES, RECORDED_BY)  
VALUES
(103, 1, 11, '2025-04-5', 1, 'Present and on time', 153),
(104, 2, 12, '2025-04-5', 2, 'Late due to traffic', 153),
(105, 3, 13, '2025-04-5', 3, 'Absent with notice', 153),
(106, 4, 14, '2025-04-5', 4, 'On leave', 153),
(107, 5, 15, '2025-04-5', 5, 'Medical leave', 153),
(108, 1, 16, '2025-04-5', 6, 'Present', 153),
(109, 2, 17, '2025-04-5', 7, 'Late', 153),
(110, 6, 18, '2025-04-5', 8, 'Excused', 153),
(111, 1, 19, '2025-04-5', 9, 'Present', 153),
(112, 7, 20, '2025-04-5', 10, 'Absent without notice', 153);


-- Step 1: Allow NULL values if using SET NULL
ALTER TABLE PROFESSOR_TEACHING_HOURS 
MODIFY COLUMN USER_ID INT NULL;

-- Step 2: Add the foreign key
ALTER TABLE PROFESSOR_TEACHING_HOURS
ADD CONSTRAINT fk_professor_teaching_hours_user
FOREIGN KEY (USER_ID) 
REFERENCES USERS(ID)
ON DELETE SET NULL  -- Teaching hours remain when user is deleted
ON UPDATE CASCADE;  -- Changes to user ID propagate automatically

-- Step 3: Verify the constraint
SHOW CREATE TABLE PROFESSOR_TEACHING_HOURS;


INSERT INTO PROFESSOR_TEACHING_HOURS 
(USER_ID, PROFESSOR_ID, CLASS_ID, COURSE_ID, SUBJECT_ID, TEACHING_DATE, LESSON_CONTENT, TIMES, HOURS, DURATION, ATTENDANCE, NOTES)
VALUES
(153, 1, 140, 11, 11, '2023-09-01', 'Introduction to Algebra', 1, 2.00, '2 hours', 'Present: 103,104,105', 'First lesson of semester'),
(153, 2, 141, 12, 12, '2023-09-02', 'Chemistry Basics', 1, 1.50, '1.5 hours', 'Present: 106,107,108', 'Lab safety introduction'),
(153, 3, 143, 13, 13, '2023-09-03', 'Physics Principles', 1, 2.00, '2 hours', 'Present: 109,110,111', 'Newtonian mechanics'),
(153, 4, 140, 14, 14, '2023-09-04', 'Literature Analysis', 1, 1.00, '1 hour', 'Present: 112,113,114', 'Shakespeare sonnets'),
(153, 5, 141, 15, 15, '2023-09-05', 'World History', 1, 1.50, '1.5 hours', 'Present: 115,116,103', 'Ancient civilizations'),
(153, 6, 142, 11, 11, '2023-09-08', 'Advanced Algebra', 2, 2.00, '2 hours', 'Present: 104,105,106', 'Quadratic equations'),
(153, 7, 141, 12, 12, '2023-09-09', 'Organic Chemistry', 2, 1.50, '1.5 hours', 'Present: 107,108,109', 'Carbon compounds'),
(153, 8, 140, 13, 13, '2023-09-10', 'Thermodynamics', 2, 2.00, '2 hours', 'Present: 110,111,112', 'Heat transfer principles'),
(153, 9, 140, 14, 14, '2023-09-11', 'Modern Poetry', 2, 1.00, '1 hour', 'Present: 113,114,115', '20th century poets'),
(153, 10, 143, 15, 15, '2023-09-12', 'Medieval History', 2, 1.50, '1.5 hours', 'Present: 116,103,104', 'Feudal systems');