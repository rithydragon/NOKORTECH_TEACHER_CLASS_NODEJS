use NOKORTECH_LMS_DB;

-- ROLES TABLE
DROP TABLE IF EXISTS ROLES;
CREATE TABLE ROLES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ROLE_NAME VARCHAR(50) UNIQUE NOT NULL,
    DESCRIPTION TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

ALTER TABLE USERS DROP COLUMN ROLE_ID;
-- USERS TABLE
DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_CODE VARCHAR(15) UNIQUE NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100) NULL,
    USERNAME VARCHAR(40) UNIQUE NOT NULL,
    EMAIL VARCHAR(150) UNIQUE NOT NULL,
    PASSWORD VARCHAR(255) UNIQUE NOT NULL,
    GENDER ENUM('FEMALE', 'MALE', 'CUSTOM') NULL,
    USER_TYPE ENUM('STUDENT', 'GENERAL', 'SYSTEM') NULL,
    DOB DATE,
    POB TEXT,
    ADDRESS TEXT,
    PHONE_NUMBER VARCHAR(15) UNIQUE,
    LOGON_STATUS BOOLEAN DEFAULT TRUE,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    LAST_LOGIN TIMESTAMP,
    CREATED_BY INT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL,
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


DROP TABLE IF EXISTS USERROLES;
CREATE TABLE USERROLES (
    USER_ID INT NOT NULL,
    ROLE_ID INT NOT NULL,
    ASSIGNED_BY INT,
    ASSIGNED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (USER_ID, ROLE_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID) ON DELETE CASCADE,
    FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);

-- PERMISSIONS TABLE
DROP TABLE IF EXISTS PERMISSIONS;
CREATE TABLE PERMISSIONS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    PERMISSION_NAME VARCHAR(100) UNIQUE NOT NULL,
    DESCRIPTION TEXT,
    MODULE_NAME VARCHAR(50) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



-- ROLE_PERMISSIONS (Many-to-Many Relationship)
DROP TABLE IF EXISTS ROLEPERMISSIONS;
CREATE TABLE ROLEPERMISSIONS (
    ROLE_ID INT NOT NULL,
    PERMISSION_ID INT NOT NULL,
    ASSIGNED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (ROLE_ID, PERMISSION_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID) ON DELETE CASCADE,
    FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(ID) ON DELETE CASCADE
);

DROP TABLE IF EXISTS USERPERMISSIONS;
CREATE TABLE USERPERMISSIONS (
    USER_ID INT NOT NULL,
    PERMISSION_ID INT NOT NULL,
    ASSIGNED_BY INT,
    ASSIGNED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (USER_ID, PERMISSION_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(ID) ON DELETE CASCADE,
    FOREIGN KEY (ASSIGNED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);

DROP TABLE IF EXISTS AUTHS;
CREATE TABLE AUTHS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    
    USER_ID INT NOT NULL,
    DEVICE_ID VARCHAR(64) NOT NULL, -- NEW: To support multiple devices

    -- Tokens
    REFRESH_TOKEN VARCHAR(512) NULL,
    ACCESS_TOKEN VARCHAR(512) NULL,
    TOKEN_EXPIRES_AT DATETIME NULL,
    REFRESH_TOKEN_EXPIRES DATETIME NULL,
    
    -- Password Reset
    RESET_TOKEN VARCHAR(255) NULL,
    RESET_TOKEN_EXPIRES DATETIME NULL,
    
    -- Security / Lockout
    FAILED_LOGIN_ATTEMPTS INT DEFAULT 0,
    LAST_LOGIN_AT DATETIME NULL,
    ACCOUNT_LOCKED_UNTIL DATETIME NULL,

    -- NEW: Refresh tracking
    LAST_REFRESH TIMESTAMP NULL,
    
    -- Audit timestamps
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Foreign key & Indexing
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    INDEX (USER_ID, DEVICE_ID)
);

CREATE TABLE USER_LOG (
  ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT NOT NULL,
  DEVICE_ID VARCHAR(64),
  LOGIN_TIME DATETIME DEFAULT CURRENT_TIMESTAMP,
  IP_ADDRESS VARCHAR(45),
  USER_AGENT TEXT,
  FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);


DROP TABLE IF EXISTS CLASS;
CREATE TABLE CLASS (
    ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    CODE VARCHAR(20) UNIQUE NOT NULL,
    COURSE_ID INT,
    INSTRUCTOR_ID INT,
    ROOM VARCHAR(50) NOT NULL,
    SEMESTER INT NOT NULL,
    YEAR VARCHAR(50) NOT NULL,
    TIME VARCHAR(50) NOT NULL,
    SCHEDULE VARCHAR(50),
    MAX_ENROLLMENT INT NOT NULL,
    STATUS ENUM('Enable', 'Disable') DEFAULT 'Enable' NOT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID) ON DELETE SET NULL,
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES USERS(ID) ON DELETE SET NULL,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


DROP TABLE IF EXISTS COURSES;
CREATE TABLE COURSES (
    ID INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    CODE VARCHAR(15) UNIQUE NOT NULL,
    TITLE VARCHAR(200) NOT NULL,
    TITLE_ENGLISH VARCHAR(200),
    DESCRIPTION TEXT,
    COST DECIMAL(10, 2),
    STATUS ENUM('active', 'inactive') DEFAULT 'active',
    PAY_STATUS ENUM('paid', 'unpaid') DEFAULT 'unpaid',
    LEVEL ENUM('Beginner', 'Intermediate', 'Advanced'),
    INSTRUCTOR_ID INT,
    START_DATE DATE,
    END_DATE DATE,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE TEACHING (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CLASS_ID INT,
    INSTRUCTOR_ID INT,
    FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID) ON DELETE SET NULL,
    FOREIGN KEY (INSTRUCTOR_ID) REFERENCES USERS(ID) ON DELETE SET NULL
);

CREATE TABLE STUDENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(15) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100) NULL,
    EMAIL VARCHAR(50) NOT NULL UNIQUE,
    GENDER ENUM('Female', 'Male', 'Custom') NOT NULL,
    DOB DATE NULL,
    POD TEXT NULL,
    ADDRESS TEXT NULL,
    PHONE_NUMBER VARCHAR(15) NULL,
    STATUS BOOLEAN DEFAULT TRUE,
    CLASS_ID INT NULL,
    COURSE_ID INT NULL,
    DEPARTMENT_ID INT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    -- Foreign Key Constraints
    CONSTRAINT FK_STUDENT_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID) ON DELETE SET NULL,
    CONSTRAINT FK_STUDENT_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID) ON DELETE SET NULL,
    CONSTRAINT FK_STUDENT_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(ID) ON DELETE SET NULL,
    CONSTRAINT FK_STUDENT_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_STUDENT_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE DEPARTMENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(15) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100) NULL,
    DESCRIPTION TEXT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    -- Foreign Key Constraints
    CONSTRAINT FK_DEPARTMENT_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    CONSTRAINT FK_DEPARTMENT_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE
);


-- UImage Table (User Image)
CREATE TABLE UIMAGE (
    IMAGE_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    IMAGEPATH VARCHAR(255) NOT NULL,
    FILE_TYPE	VARCHAR(50),
    CREATED_BY INT DEFAULT NULL,
	CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT DEFAULT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE PERMISSIONGROUPS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    GROUP_NAME VARCHAR(100) NOT NULL
);

CREATE TABLE GROUPROLES (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    GROUP_ID INT,
    ROLE_ID INT,
    FOREIGN KEY (GROUP_ID) REFERENCES PERMISSIONGROUPS(ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID)
);



DROP TABLE IF EXISTS SUBJECTS;
CREATE TABLE SUBJECTS (
    ID INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    CODE VARCHAR(13) UNIQUE NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    MAX_SCORE INT DEFAULT 100,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT, 
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE ON UPDATE SET NULL 
);

DROP TABLE IF EXISTS SCORES;
CREATE TABLE SCORES (
    ID INT AUTO_INCREMENT PRIMARY KEY NOT NULL,
    STUDENT_ID INT NULL,
    SUBJECT_ID INT NULL,
    SCORE FLOAT NULL,
    DESCRIPTION TEXT NULL,
    NOTE TEXT NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(ID) ON DELETE SET NULL,
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID) ON DELETE SET NULL
);


CREATE TABLE USER_DETAILS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    NATIONALITY VARCHAR(100),
    RELIGION VARCHAR(100),
    MARITAL_STATUS ENUM('Single', 'Married', 'Divorced', 'Widowed', 'Separated'),
    OCCUPATION VARCHAR(100),
    COMPANY_NAME VARCHAR(100),
    COMPANY_ADDRESS TEXT,
    JOB_TITLE VARCHAR(100),
    EMPLOYMENT_TYPE ENUM('Full-Time', 'Part-Time', 'Contract', 'Freelance', 'Internship', 'Unemployed'),
    SALARY DECIMAL(15, 2),
    WORK_EMAIL VARCHAR(150),
    WORK_PHONE_NUMBER VARCHAR(15),
    PASSPORT_NUMBER VARCHAR(50),
    NATIONAL_ID VARCHAR(50),
    DRIVING_LICENSE_NUMBER VARCHAR(50),
    TAX_ID VARCHAR(50),
    SOCIAL_SECURITY_NUMBER VARCHAR(50),
    BLOOD_TYPE ENUM('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-'),
    DISABILITIES TEXT,
    ALLERGIES TEXT,
    MEDICAL_CONDITIONS TEXT,
    EMERGENCY_CONTACT_NAME VARCHAR(100),
    EMERGENCY_CONTACT_PHONE VARCHAR(15),
    EMERGENCY_CONTACT_RELATIONSHIP VARCHAR(100),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE PARENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    FATHER_NAME VARCHAR(100),
    FATHER_DOB DATE,
    FATHER_OCCUPATION VARCHAR(100),
    FATHER_COMPANY_NAME VARCHAR(100),
    FATHER_COMPANY_ADDRESS TEXT,
    FATHER_PHONE_NUMBER VARCHAR(15),
    FATHER_EMAIL VARCHAR(150),
    FATHER_NATIONALITY VARCHAR(100),
    FATHER_RELIGION VARCHAR(100),
    FATHER_EDUCATION_LEVEL ENUM('Primary', 'Secondary', 'Bachelor', 'Master', 'PhD', 'Other'),
    MOTHER_NAME VARCHAR(100),
    MOTHER_DOB DATE,
    MOTHER_OCCUPATION VARCHAR(100),
    MOTHER_COMPANY_NAME VARCHAR(100),
    MOTHER_COMPANY_ADDRESS TEXT,
    MOTHER_PHONE_NUMBER VARCHAR(15),
    MOTHER_EMAIL VARCHAR(150),
    MOTHER_NATIONALITY VARCHAR(100),
    MOTHER_RELIGION VARCHAR(100),
    MOTHER_EDUCATION_LEVEL ENUM('Primary', 'Secondary', 'Bachelor', 'Master', 'PhD', 'Other'),
    PARENTS_MARITAL_STATUS ENUM('Married', 'Divorced', 'Separated', 'Widowed', 'Single'),
    PARENTS_ADDRESS TEXT,
    PARENTS_ANNUAL_INCOME DECIMAL(15, 2),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE GUARDIANS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    GUARDIAN_NAME VARCHAR(100),
    GUARDIAN_DOB DATE,
    GUARDIAN_RELATIONSHIP ENUM('Father', 'Mother', 'Uncle', 'Aunt', 'Grandfather', 'Grandmother', 'Brother', 'Sister', 'Other'),
    GUARDIAN_OCCUPATION VARCHAR(100),
    GUARDIAN_COMPANY_NAME VARCHAR(100),
    GUARDIAN_COMPANY_ADDRESS TEXT,
    GUARDIAN_PHONE_NUMBER VARCHAR(15),
    GUARDIAN_EMAIL VARCHAR(150),
    GUARDIAN_NATIONALITY VARCHAR(100),
    GUARDIAN_RELIGION VARCHAR(100),
    GUARDIAN_EDUCATION_LEVEL ENUM('Primary', 'Secondary', 'Bachelor', 'Master', 'PhD', 'Other'),
    GUARDIAN_ADDRESS TEXT,
    GUARDIAN_ANNUAL_INCOME DECIMAL(15, 2),
    IS_PRIMARY_GUARDIAN BOOLEAN DEFAULT FALSE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE USER_HISTORY (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    EVENT_TYPE ENUM('Profile Update', 'Login', 'Logout', 'Password Change', 'Role Change', 'Permission Change', 'Account Activation', 'Account Deactivation', 'Email Change', 'Phone Change', 'Address Change'),
    EVENT_DESCRIPTION TEXT,
    EVENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IP_ADDRESS VARCHAR(45),
    DEVICE_TYPE ENUM('Desktop', 'Mobile', 'Tablet', 'Other'),
    BROWSER VARCHAR(100),
    OPERATING_SYSTEM VARCHAR(100),
    LOCATION VARCHAR(100),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE USER_DOCUMENTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    DOCUMENT_TYPE ENUM('Passport', 'National ID', 'Driving License', 'Birth Certificate', 'Academic Certificate', 'Resume', 'Other'),
    DOCUMENT_NAME VARCHAR(255),
    DOCUMENT_PATH VARCHAR(255),
    DOCUMENT_SIZE BIGINT,
    FILE_TYPE VARCHAR(50),
    UPLOADED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    EXPIRY_DATE DATE,
    IS_VERIFIED BOOLEAN DEFAULT FALSE,
    VERIFIED_BY INT,
    VERIFIED_AT TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (VERIFIED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


CREATE TABLE USER_EDUCATION (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    INSTITUTION_NAME VARCHAR(255),
    DEGREE_TYPE ENUM('Primary', 'Secondary', 'Bachelor', 'Master', 'PhD', 'Diploma', 'Certificate', 'Other'),
    FIELD_OF_STUDY VARCHAR(255),
    START_DATE DATE,
    END_DATE DATE,
    GRADUATION_DATE DATE,
    GPA DECIMAL(4, 2),
    DOCUMENT_PATH VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE USER_EMPLOYMENT (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    COMPANY_NAME VARCHAR(255),
    JOB_TITLE VARCHAR(255),
    EMPLOYMENT_TYPE ENUM('Full-Time', 'Part-Time', 'Contract', 'Freelance', 'Internship'),
    START_DATE DATE,
    END_DATE DATE,
    SALARY DECIMAL(15, 2),
    JOB_DESCRIPTION TEXT,
    REFERENCE_NAME VARCHAR(255),
    REFERENCE_PHONE VARCHAR(15),
    REFERENCE_EMAIL VARCHAR(150),
    DOCUMENT_PATH VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);


CREATE TABLE USER_SKILLS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    SKILL_NAME VARCHAR(255),
    SKILL_LEVEL ENUM('Beginner', 'Intermediate', 'Advanced', 'Expert'),
    CERTIFICATION_NAME VARCHAR(255),
    CERTIFICATION_PATH VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE USER_SOCIAL_MEDIA (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    PLATFORM ENUM('Facebook', 'Twitter', 'LinkedIn', 'Instagram', 'YouTube', 'Other'),
    PROFILE_URL VARCHAR(255),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);

CREATE TABLE USER_PREFERENCES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    USER_ID INT NOT NULL,
    LANGUAGE ENUM('English', 'Spanish', 'French', 'German', 'Chinese', 'Other'),
    THEME ENUM('Light', 'Dark'),
    NOTIFICATION_EMAIL BOOLEAN DEFAULT TRUE,
    NOTIFICATION_SMS BOOLEAN DEFAULT TRUE,
    NOTIFICATION_PUSH BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID) ON DELETE CASCADE
);




-- TEACHING TABLE
CREATE TABLE TEACHING (
  TEACHING_ID INT AUTO_INCREMENT PRIMARY KEY,
  ROOM_ID INT,
  COURSE_ID INT,
  TIME_ID INT,
  TEACHER_ID INT,
  DESCRIPTION TEXT NULL,
  CREATED_BY INT NULL,
  UPDATED_BY INT NULL,
  
  FOREIGN KEY (ROOM_ID) REFERENCES ROOM(ID),
  FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID),
  FOREIGN KEY (TIME_ID) REFERENCES TIME(ID),
  FOREIGN KEY (TEACHER_ID) REFERENCES USERS(ID),
  FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL,
  FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


CREATE TABLE ROOM (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    ROOM_NAME VARCHAR(100) NOT NULL,
    ROOM_TYPE VARCHAR(50), -- e.g., Lab, Classroom, Seminar Room
    FLOOR INT DEFAULT 1,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


CREATE TABLE TIME (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    TIME_SLOT VARCHAR(100) NOT NULL, -- e.g., "Monday 08:00-10:00"
    START_TIME TIME,
    END_TIME TIME,
    DAY_OF_WEEK VARCHAR(20),
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID) ON DELETE SET NULL
);


-- Drop existing tables if any (in order to avoid foreign key errors)
-- Drop existing tables
DROP TABLE IF EXISTS STUDENT_SCORE;
DROP TABLE IF EXISTS ACADEMIC_SETTING;
DROP TABLE IF EXISTS SEMESTER;
-- Create SEMISTER table
CREATE TABLE SEMESTER (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT NULL,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT DEFAULT NULL
);

-- Create ACADEMIC_SETTING table
CREATE TABLE ACADEMIC_SETTING (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(50) NOT NULL,
    ACADEMIC_CODE VARCHAR(50),
    NAME VARCHAR(255) NOT NULL,
    ENGLISH_NAME VARCHAR(255) NOT NULL,
    SEMESTER_ID INT NULL,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_ACADEMIC_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_ACADEMIC_SEMESTER FOREIGN KEY (SEMESTER_ID) REFERENCES SEMESTER(ID)
);

-- CREATE BATCH TABLE
-- CREATE BATCH TABLE WITH ENGLISH NAME COLUMN
-- CREATE BATCH TABLE WITH AUDIT COLUMNS
CREATE TABLE BATCH (
  ID INT NOT NULL AUTO_INCREMENT,
  BATCH_NAME VARCHAR(100) NOT NULL,
  BATCH_ENGLISH_NAME VARCHAR(100) NOT NULL,
  ACADEMIC_ID INT NOT NULL,
  START_DATE DATE NOT NULL,
  END_DATE DATE NOT NULL,
  IS_ACTIVE TINYINT(1) DEFAULT 1,
  CREATED_BY INT NULL,
  CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  UPDATED_BY INT,
  UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (ID),
  UNIQUE KEY BATCH_UNIQUE (BATCH_NAME, ACADEMIC_ID),
  FOREIGN KEY (ACADEMIC_ID) REFERENCES ACADEMIC_SETTING(ID) ON DELETE RESTRICT ON UPDATE CASCADE
) 

-- Create STUDENT_SCORE table
CREATE TABLE STUDENT_SCORE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT NULL,
    SUBJECT_ID INT NULL,
	CLASS_ID INT NULL,
    ACADEMIC_ID INT NULL,
	SEMESTER_ID INT NULL,
    SCORE DECIMAL(5,2) NULL,
    RANKING VARCHAR(3) NULL,
	EXAM_DATE DATE NULL,
    IS_EDITED BOOLEAN DEFAULT FALSE,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_SCORE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
	CONSTRAINT FK_SCORE_UPDATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
	CONSTRAINT FK_SCORE_CLASS FOREIGN KEY (CREATED_BY) REFERENCES CLASS(ID),
    CONSTRAINT FK_SCORE_ACADEMIC FOREIGN KEY (ACADEMIC_ID) REFERENCES ACADEMIC_SETTING(ID)
);


CREATE TABLE STUDENT_SCORE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT NULL,
    SUBJECT_ID INT NULL,
    CLASS_ID INT NULL,
    ACADEMIC_ID INT NULL,
    SEMESTER_ID INT NULL,
    SCORE DECIMAL(5,2) NULL,
    RANKING VARCHAR(3) NULL,
    EXAM_DATE DATE NULL,
    IS_CREATED BOOLEAN DEFAULT TRUE,
    IS_EDITED BOOLEAN DEFAULT FALSE,
    NOTE TEXT(200) NULL,
    CREATED_BY INT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_SCORE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_SCORE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_SCORE_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    CONSTRAINT FK_SCORE_ACADEMIC FOREIGN KEY (ACADEMIC_ID) REFERENCES ACADEMIC_SETTING(ID),
    CONSTRAINT FK_SCORE_SEMESTER FOREIGN KEY (SEMESTER_ID) REFERENCES SEMESTER(ID),
    CONSTRAINT FK_SCORE_SUBJECT FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECT(ID),
    CONSTRAINT FK_SCORE_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES USERS(ID)
);


CREATE TABLE TELEGRAM_STORE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    
    -- Link Information
    LINK_TYPE ENUM('GROUP', 'PERSONAL', 'OFFICIAL', 'STUDY_GROUP') NOT NULL DEFAULT 'GROUP',
    TELEGRAM_LINK VARCHAR(255) NOT NULL,
    LINK_TITLE VARCHAR(100) NOT NULL,
    LINK_DESCRIPTION TEXT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    IS_OFFICIAL BOOLEAN DEFAULT FALSE,
    
    -- Relationship Fields (all optional)
    COURSE_ID INT NULL,
    CLASS_ID INT NULL,
    ACADEMIC_ID INT NULL,
    DEPARTMENT_ID INT NULL,
    
    -- Metadata
    CREATED_BY INT NOT NULL,
    UPDATED_BY INT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    EXPIRES_AT TIMESTAMP NULL,
    
    -- Constraints
    CONSTRAINT FK_TELEGRAM_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID) ON DELETE SET NULL,
    CONSTRAINT FK_TELEGRAM_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID) ON DELETE SET NULL,
    CONSTRAINT FK_TELEGRAM_ACADEMIC FOREIGN KEY (ACADEMIC_ID) REFERENCES ACADEMIC_SETTING(ID) ON DELETE SET NULL,
    CONSTRAINT FK_TELEGRAM_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(ID) ON DELETE SET NULL,
    CONSTRAINT FK_TELEGRAM_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_TELEGRAM_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);

-- Indexes for performance
CREATE INDEX IDX_TELEGRAM_COURSE ON TELEGRAM_STORE(COURSE_ID);
CREATE INDEX IDX_TELEGRAM_CLASS ON TELEGRAM_STORE(CLASS_ID);
CREATE INDEX IDX_TELEGRAM_ACADEMIC ON TELEGRAM_STORE(ACADEMIC_ID);
CREATE INDEX IDX_TELEGRAM_DEPARTMENT ON TELEGRAM_STORE(DEPARTMENT_ID);
CREATE INDEX IDX_TELEGRAM_ACTIVE ON TELEGRAM_STORE(IS_ACTIVE);
CREATE INDEX IDX_TELEGRAM_EXPIRY ON TELEGRAM_STORE(EXPIRES_AT);


CREATE TABLE ATTENDANCE_TYPES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(10) NOT NULL UNIQUE,
    NAME VARCHAR(50) NOT NULL,
    DESCRIPTION TEXT NULL,
    IS_PRESENT BOOLEAN DEFAULT FALSE,
    COLOR_CODE VARCHAR(7) NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_ATTENDANCE_TYPE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_ATTENDANCE_TYPE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);



CREATE TABLE CLASS_SCHEDULES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CLASS_ID INT NOT NULL,
    SUBJECT_ID INT NOT NULL,
    DAY_OF_WEEK ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    ROOM VARCHAR(20) NULL,
    TEACHER_ID INT NOT NULL,
    ACADEMIC_YEAR_ID INT NOT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_SCHEDULE_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    CONSTRAINT FK_SCHEDULE_SUBJECT FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID),
    CONSTRAINT FK_SCHEDULE_TEACHER FOREIGN KEY (TEACHER_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_SCHEDULE_ACADEMIC_YEAR FOREIGN KEY (ACADEMIC_YEAR_ID) REFERENCES ACADEMIC_SETTING(ID),
    CONSTRAINT FK_SCHEDULE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_SCHEDULE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);      


CREATE TABLE STUDENT_ATTENDANCE (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT NOT NULL,
    SCHEDULE_ID INT NULL,
    ATTENDANCE_DATE DATE NULL,
    ATTENDANCE_TYPE_ID INT NULL,
    NOTES TEXT NULL,
    RECORDED_BY INT NULL,
    RECORDED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_ATTENDANCE_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(ID),
    CONSTRAINT FK_ATTENDANCE_SCHEDULE FOREIGN KEY (SCHEDULE_ID) REFERENCES CLASS_SCHEDULES(ID),
    CONSTRAINT FK_ATTENDANCE_TYPE FOREIGN KEY (ATTENDANCE_TYPE_ID) REFERENCES ATTENDANCE_TYPES(ID),
    CONSTRAINT FK_ATTENDANCE_RECORDED_BY FOREIGN KEY (RECORDED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_ATTENDANCE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID),
    
    UNIQUE KEY UNIQUE_ATTENDANCE (STUDENT_ID, SCHEDULE_ID, ATTENDANCE_DATE)
);


CREATE TABLE ATTENDANCE_TYPES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(10) NOT NULL UNIQUE,
    NAME VARCHAR(50) NOT NULL,
    DESCRIPTION TEXT NULL,
    IS_PRESENT BOOLEAN DEFAULT FALSE,
    COLOR_CODE VARCHAR(7) NULL,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_ATTENDANCE_TYPE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_ATTENDANCE_TYPE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);



CREATE TABLE CLASS_SCHEDULES (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CLASS_ID INT NOT NULL,
    SUBJECT_ID INT NOT NULL,
    COURSE_ID INT NOT NULL, -- added
    DAY_OF_WEEK ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL,
    START_TIME TIME NOT NULL,
    END_TIME TIME NOT NULL,
    ROOM VARCHAR(20) NULL,
    TEACHER_ID INT NOT NULL,
    ACADEMIC_YEAR_ID INT NOT NULL,
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_BY INT NULL,
    UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

    CONSTRAINT FK_SCHEDULE_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    CONSTRAINT FK_SCHEDULE_SUBJECT FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID),
    CONSTRAINT FK_SCHEDULE_COURSE FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID),
    CONSTRAINT FK_SCHEDULE_TEACHER FOREIGN KEY (TEACHER_ID) REFERENCES USERS(ID),
    CONSTRAINT FK_SCHEDULE_ACADEMIC_YEAR FOREIGN KEY (ACADEMIC_YEAR_ID) REFERENCES ACADEMIC_SETTING(ID),
    CONSTRAINT FK_SCHEDULE_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_SCHEDULE_UPDATED_BY FOREIGN KEY (UPDATED_BY) REFERENCES USERS(ID)
);



CREATE TABLE ATTENDANCE_EXCEPTIONS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    STUDENT_ID INT NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    REASON TEXT NOT NULL,
    APPROVED_BY INT NULL,
    APPROVED_DATE TIMESTAMP NULL,
    STATUS ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    CREATED_BY INT NOT NULL,
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT FK_EXCEPTION_STUDENT FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(ID),
    CONSTRAINT FK_EXCEPTION_APPROVED_BY FOREIGN KEY (APPROVED_BY) REFERENCES USERS(ID),
    CONSTRAINT FK_EXCEPTION_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES USERS(ID)
);


CREATE TABLE ATTENDANCE_REPORTS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    REPORT_NAME VARCHAR(100) NOT NULL,
    REPORT_TYPE ENUM('Daily', 'Weekly', 'Monthly', 'Custom') NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    CLASS_ID INT NULL,
    DEPARTMENT_ID INT NULL,
    GENERATED_BY INT NOT NULL,
    GENERATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FILE_PATH VARCHAR(255) NULL,
    
    CONSTRAINT FK_REPORT_CLASS FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    CONSTRAINT FK_REPORT_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENTS(ID),
    CONSTRAINT FK_REPORT_GENERATED_BY FOREIGN KEY (GENERATED_BY) REFERENCES USERS(ID)
);


-- Professors table
CREATE TABLE PROFESSORS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(20) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    NAME_ENGLISH VARCHAR(100),
    GENDER ENUM('Male', 'Female', 'Other'),


    DATE_OF_BIRTH DATE,
    PHONE_NUMBER VARCHAR(20),
    SPECIALIZATION VARCHAR(100),
    DEGREE_LEVEL VARCHAR(50),
    GRADUATION_YEAR INT,
    STATUS BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Subjects table
CREATE TABLE SUBJECTS (  // replace with courses
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(20) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    CREDITS INT,
    STATUS BOOLEAN DEFAULT TRUE
);

-- Classes table
CREATE TABLE CLASSES (    // not use
    ID INT AUTO_INCREMENT PRIMARY KEY,
    CODE VARCHAR(20) NOT NULL UNIQUE,
    NAME VARCHAR(100) NOT NULL,
    BATCH VARCHAR(20),
    SEMESTER VARCHAR(20),
    ACADEMIC_YEAR VARCHAR(20),
    STATUS BOOLEAN DEFAULT TRUE
);

-- Professor Teaching Hours table
CREATE TABLE PROFESSOR_TEACHING_HOURS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    PROFESSOR_ID INT NULL,
    CLASS_ID INT NULL,
    COURSE_ID INT NULL,
    SUBJECT_ID INT NULL,
    TEACHING_DATE DATE NULL,
    LESSON_CONTENT TEXT,
    TIMES INT DEFAULT 1,
    HOURS DECIMAL(5,2) NULL,
    DURATION VARCHAR(50),
    ATTENDANCE TEXT,
    NOTES TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (PROFESSOR_ID) REFERENCES PROFESSORS(ID),
    FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID),
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID),
    FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID)
);

CREATE TABLE DAILY_SCHEDULES (
  SCHEDULE_ID INT PRIMARY KEY AUTO_INCREMENT,
  CLASS_ID INT NULL,
  SUBJECT_ID INT NULL,
  TEACHER_ID INT NULL,
  ROOM_ID INT NULL,
  START_TIME TIME NOT NULL,
  END_TIME TIME NOT NULL,
  DAY_OF_WEEK ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday') NOT NULL,
  CREATED_BY INT,
  CREATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP,
  UPDATED_BY INT,
  UPDATED_DATE TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,

  CONSTRAINT fk_class FOREIGN KEY (CLASS_ID) REFERENCES CLASS(ID) ON DELETE SET NULL,
  CONSTRAINT fk_subject FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS(ID) ON DELETE SET NULL,
  CONSTRAINT fk_teacher FOREIGN KEY (TEACHER_ID) REFERENCES USERS(ID) ON DELETE SET NULL,
  CONSTRAINT fk_room FOREIGN KEY (ROOM_ID) REFERENCES ROOM(ID) ON DELETE SET NULL
);
